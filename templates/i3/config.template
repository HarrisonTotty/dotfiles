# ~/.config/i3/config
# Primary i3 configuration file
{%
  do require('this.exec_exit', 'this.exec_lock', 'this.exec_restart_wm', 'this.exec_terminal')
%}


# ---------------- Modifier -----------------

# Set modifier to the "Windows key"
set $mod Mod4

# Set the floating modifier
floating_modifier $mod

# -------------------------------------------



# ----------------- Colors ------------------

# Set color variables
set_from_resource $fg i3wm.color7
set_from_resource $bg i3wm.color2
set_from_resource $c0 i3wm.color0
set_from_resource $c1 i3wm.color1
set_from_resource $c2 i3wm.color2
set_from_resource $c3 i3wm.color3
set_from_resource $c4 i3wm.color4
set_from_resource $c5 i3wm.color5
set_from_resource $c6 i3wm.color6
set_from_resource $c7 i3wm.color7
set_from_resource $c8 i3wm.color8
set_from_resource $c9 i3wm.color9
set_from_resource $c10 i3wm.color10
set_from_resource $c11 i3wm.color11
set_from_resource $c12 i3wm.color12
set_from_resource $c13 i3wm.color13
set_from_resource $c14 i3wm.color14
set_from_resource $c15 i3wm.color15

# Set window colors
# CLASS                  BRDR  BCKGRD  TXT  NDCTR  CHLDBRDR
client.focused           $c3   $c3     $fg  $c3    $c3
client.focused_inactive  $bg   $bg     $fg  $bg    $bg
client.unfocused         $bg   $bg     $fg  $bg    $bg
client.urgent            $bg   $bg     $fg  $bg    $bg
client.placeholder       $bg   $bg     $fg  $bg    $bg
client.background        $bg

# -------------------------------------------



# ----------- Launching Programs ------------

{% if this.exec_mkdot is defined %}
# Dotfiles Generator
bindsym $mod+period exec {{ this.exec_mkdot }}
{% endif %}

{% if this.exec_file_manager is defined %}
# File Manager
bindsym $mod+f exec {{ this.exec_file_manager }}
{% endif %}

{% if this.exec_jira is defined %}
# JIRA Browser
bindsym $mod+j exec --no-startup-id {{ this.exec_jira }}
{% endif %}

{% if this.exec_jira_alt is defined %}
# JIRA Browser (Alternative)
bindsym $mod+Shift+j exec --no-startup-id {{ this.exec_jira_alt }}
{% endif %}

# Lock Screen
bindsym $mod+Shift+l exec --no-startup-id {{ this.exec_lock }}

{% if this.exec_network is defined %}
# Network Manager
bindsym $mod+Shift+F2 exec --no-startup-id {{ this.exec_network }}
{% endif %}

{% if this.exec_passwords is defined %}
# Password Manager
bindsym $mod+F12 exec --no-startup-id {{ this.exec_passwords }}
{% endif %}

{% if this.exec_launcher is defined %}
# Program Launcher
bindsym $mod+grave exec {{ this.exec_launcher }}
{% endif %}

{% if this.exec_python is defined %}
# Python Interpreter
bindsym $mod+p exec {{ this.exec_python }}
{% endif %}

{% if this.exec_screenshot_full is defined %}
# Screenshot (fullscreen)
bindsym $mod+Insert exec --no-startup-id {{ this.exec_screenshot_full }}
{% endif %}

{% if this.exec_screenshot_select is defined %}
# Screenshot (selection)
bindsym --release $mod+Shift+Insert exec --no-startup-id {{ this.exec_screenshot_select }}
{% endif %}

{% if this.exec_ssh is defined %}
# SSH Launcher
bindsym $mod+Shift+grave exec {{ this.exec_ssh }}
{% endif %}

{% if this.exec_editor is defined %}
# Text Editor
bindsym $mod+e exec {{ this.exec_editor }}
{% endif %}

{% if this.exec_editor_alt is defined %}
# Text Editor (Alternative)
bindsym $mod+t exec {{ this.exec_editor_alt }}
{% endif %}

# Terminal
bindsym $mod+Return exec {{ this.exec_terminal }}

{% if this.exec_terminal_alt is defined %}
# Terminal (Alternative)
bindsym $mod+Shift+Return exec {{ this.exec_terminal_alt }}
{% endif %}

{% if this.exec_window_switcher is defined %}
# Window Switcher
bindsym Mod1+Tab exec {{ this.exec_window_switcher }}
{% endif %}

# -------------------------------------------



# ---------- Controlling Programs -----------

# Float all other windows by default
for_window [class="^.*"] floating enable

# Disable focus following via mouse
focus_follows_mouse no

# Change current focus
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# Move the focused window
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# Set split mode to horizontal
bindsym $mod+Shift+h exec --no-startup-id "i3-msg split h && notify-send -u low \\"i3\\" \\"Set relative split mode to horizontal...\\""

# Set split mode to vertical
bindsym $mod+Shift+v exec --no-startup-id "i3-msg split v && notify-send -u low \\"i3\\" \\"Set relative split mode to veritcal...\\""

# Enable fullscreen mode on the focused window
bindsym $mod+Shift+f fullscreen toggle

# Center the focused window
bindsym $mod+Shift+c move position center

# Change the container layout to stacking
bindsym $mod+Shift+s exec --no-startup-id "i3-msg layout stacking && notify-send -u low \\"i3\\" \\"Switched to stacked layout...\\""

# Change the container layout to tabbed
bindsym $mod+Shift+t exec --no-startup-id "i3-msg layout tabbed && notify-send -u low \\"i3\\" \\"Switched to tabbed layout...\\""

# Toggle split layout mode
bindsym $mod+Shift+e exec --no-startup-id "i3-msg layout toggle split && notify-send -u low \\"i3\\" \\"Toggled split layout...\\""

# Toggle between tiling and floating mode on the focused container
bindsym $mod+Shift+space floating toggle

# Change focus between tiling and floating windows
bindsym $mod+space focus mode_toggle

# Focus the parent container
bindsym $mod+Shift+p focus parent

# Kill the currently focused container
bindsym $mod+q kill

# Restart window manager in-place
bindsym $mod+Shift+r exec --no-startup-id {{ this.exec_restart_wm }}

# Exit window manager (and potentially shutdown)
bindsym $mod+Shift+Escape exec --no-startup-id {{ this.exec_exit }}

# -------------------------------------------



# --------------- Workspaces ----------------

# Connected Monitors
set $MonitorCenter {{ primary_display.name }}
set $MonitorLeft DP2
set $MonitorRight HDMI1

# Define workspace output monitors
workspace 1 output $MonitorCenter
workspace 2 output $MonitorCenter
workspace 3 output $MonitorCenter
workspace 4 output $MonitorCenter
workspace 5 output $MonitorLeft
workspace 6 output $MonitorLeft
workspace 7 output $MonitorLeft
workspace 8 output $MonitorRight
workspace 9 output $MonitorRight
workspace 10 output $MonitorRight

# Switch between workspaces
bindsym $mod+1 workspace 1
bindsym $mod+2 workspace 2
bindsym $mod+3 workspace 3
bindsym $mod+4 workspace 4
bindsym $mod+5 workspace 5
bindsym $mod+6 workspace 6
bindsym $mod+7 workspace 7
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9
bindsym $mod+0 workspace 10

# Move focused container between workspaces
bindsym $mod+Shift+1 move container to workspace 1
bindsym $mod+Shift+2 move container to workspace 2
bindsym $mod+Shift+3 move container to workspace 3
bindsym $mod+Shift+4 move container to workspace 4
bindsym $mod+Shift+5 move container to workspace 5
bindsym $mod+Shift+6 move container to workspace 6
bindsym $mod+Shift+7 move container to workspace 7
bindsym $mod+Shift+8 move container to workspace 8
bindsym $mod+Shift+9 move container to workspace 9
bindsym $mod+Shift+0 move container to workspace 10

# -------------------------------------------



# --------------- Appearance ----------------

# Set a dummy font to make the title bars taller.
font pango:Iosevka 16

# This is what *actually* sets the font.
for_window [class=".*"] title_format "<span font='curie' font_size='xx-small'> [ %title ]</span>"

# Dynamically change wallpapers
bindsym $mod+Shift+w exec --no-startup-id "$HOME/.config/scripts/rofi-wal.sh"

# Set the window border size (in pixels)
for_window [class="^.*"] border normal 3

# Enable smart borders
smart_borders on

# Set the inner and outer gap sizes (in pixels).
gaps inner 0
gaps outer 0

# -------------------------------------------



{% if this.exec_startup is defined %}
# ------------- Initialization --------------

# Run the following after startup
exec --no-startup-id {{ this.exec_startup }}

# -------------------------------------------
{% endif %}




